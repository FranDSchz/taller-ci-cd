name: CI/CD
on:
  push:
    branches:
      - main
      - staging
      - 'feature/**'
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para el rollback'
        required: true
        type: choice
        options:
        - production
        - staging

jobs:
  build-test:
    name: üîß Build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
      - name: Notify Slack - Build y Tests
        uses: 8398a7/action-slack@v3
        if: github.ref == 'refs/heads/main' && failure()
        with:
          status: ${{ job.status }}
          author_name: 'üîß Build y test'
          job_name: üîß Build-test
          fields: repo,message,commit,author,eventName,ref,took
          mention: 'here'
          if_mention: failure
          icon_emoji: ':hammer_and_wrench:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


  lint:
    name: üßº Lint
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' 
      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint .

      - name: Notify Slack - Lint
        uses: 8398a7/action-slack@v3
        if: github.ref == 'refs/heads/main' && failure()
        with:
          status: ${{ job.status }}
          author_name: 'üßº Lint'
          job_name: üßº Lint
          fields: took
          icon_emoji: ':broom:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
  sonarcloud:
    name: üìä SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run tests with coverage
        run: npm test -- --coverage
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Notify Slack - SonarCloud Analysis
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          author_name: 'üìä SonarCloud Analysis'
          job_name: üìä SonarCloud Analysis
          fields: repo,message,commit,author,eventName,ref,took
          icon_emoji: ':bar_chart:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  move-trello-card:
    name: üÉè Move card to Done ‚úîÔ∏è
    needs: sonarcloud
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            fetch-depth: 1

      - name: Mover tarjeta Trello a "Done"
        if: success()
        run: |
          echo "Obteniendo ID de la tarjeta Trello desde el √∫ltimo commit..."
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit: $COMMIT_MSG"

          TRELLO_CARD_ID=$(echo "$COMMIT_MSG" | grep -oP '(?<=\[TRELLO-)[a-zA-Z0-9]+(?=\])')
    
          if [ -z "$TRELLO_CARD_ID" ]; then
          echo "No se encontr√≥ ID de tarjeta Trello en el mensaje de commit."
          exit 0
          fi

          echo "ID de la tarjeta detectado: $TRELLO_CARD_ID"

          echo "Moviendo tarjeta a lista Done..."
          curl -s -X PUT "https://api.trello.com/1/cards/$TRELLO_CARD_ID/idList" \
            -d "value=${{ secrets.TRELLO_DONE_LIST_ID }}" \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}"
  deploy-production:
    name: üöÄ Deploy to Production
    needs: sonarcloud
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Render Production Deploy Hook 
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
      - name: Notify Slack - Deploy Production
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          author_name: 'üöÄ Deploy'
          job_name: üöÄ Deploy to Production
          fields: took
          icon_emoji: ':rocket:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  deploy-staging:
    name: üöÄ Deploy to Staging
    needs: sonarcloud
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Trigger Render Staging Deploy Hook
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL_STAGING }}"
      - name: Notify Slack - Deploy Staging
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          author_name: 'üöÄ Deploy'
          job_name: üöÄ Deploy to Staging
          fields: took
          icon_emoji: ':rocket:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_STAGING }}
  manual-rollback:
    name: ‚è™ Manual Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: 'Trigger Rollback in Render'
        run: |
          # Seleccionar el Service ID y el webhook de Slack seg√∫n el input
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            SERVICE_ID="${{ secrets.RENDER_SERVICE_ID_PRODUCTION }}"
            SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}"
          else
            SERVICE_ID="${{ secrets.RENDER_SERVICE_ID_STAGING }}"
            SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL_STAGING }}"
          fi

          echo "Buscando el √∫ltimo despliegue exitoso para el servicio ${SERVICE_ID}..."

          # Usamos curl y jq para buscar el commit del √∫ltimo deploy exitoso ("live")
          LAST_SUCCESSFUL_COMMIT_ID=$(curl --request GET \
            --url "https://api.render.com/v1/services/${SERVICE_ID}/deploys?limit=20" \
            --header "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            --header 'Accept: application/json' | \
            jq -r '.[] | select(.status == "live") | .commit.id' | head -n 1)

          if [ -z "$LAST_SUCCESSFUL_COMMIT_ID" ]; then
            echo "::error::No se pudo encontrar un despliegue exitoso anterior para hacer rollback."
            exit 1
          fi

          echo "√öltimo commit exitoso encontrado: ${LAST_SUCCESSFUL_COMMIT_ID}"
          echo "Iniciando rollback..."

          # Usamos curl para disparar un nuevo deploy usando el commit encontrado
          curl --request POST \
            --url "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
            --header "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data "{\"commitId\": \"${LAST_SUCCESSFUL_COMMIT_ID}\"}"
      
      - name: Notify Slack - Rollback Started
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          author_name: '‚è™ Rollback Iniciado'
          job_name: ‚è™ Manual Rollback
          fields: author,eventName,ref
          icon_emoji: ':rewind:'
        env:
          SLACK_WEBHOOK_URL: |
            ${{ (github.event.inputs.environment == 'production' && secrets.SLACK_WEBHOOK_URL) ||
                (github.event.inputs.environment == 'staging' && secrets.SLACK_WEBHOOK_URL_STAGING) }}
